import mysql.connector

def create_database():
    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="your_password"
    )
    cursor = conn.cursor()

    # ŒîŒ∑ŒºŒπŒøœÖœÅŒ≥ŒØŒ± Œ≤Œ¨œÉŒ∑œÇ Œ¥ŒµŒ¥ŒøŒºŒ≠ŒΩœâŒΩ
    cursor.execute("CREATE DATABASE IF NOT EXISTS iExPLORE")
    cursor.execute("USE iExPLORE")

    # Œ†ŒØŒΩŒ±Œ∫Œ±œÇ Users
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INT(11) NOT NULL AUTO_INCREMENT,
        username VARCHAR(255) NOT NULL UNIQUE,
        password VARCHAR(255) NOT NULL,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        email VARCHAR(255) NOT NULL UNIQUE,
        PRIMARY KEY (user_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
    """)

    # Œ†ŒØŒΩŒ±Œ∫Œ±œÇ Administrators
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS administrators (
        administrator_id INT(11) NOT NULL AUTO_INCREMENT,
        id INT(11) NOT NULL,
        admin_role ENUM('superadmin', 'moderator') NOT NULL,
        username VARCHAR(255) NOT NULL UNIQUE,
        password VARCHAR(255) NOT NULL,
        PRIMARY KEY (administrator_id),
        FOREIGN KEY (id) REFERENCES users(user_id) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
    """)

    # Œ†ŒØŒΩŒ±Œ∫Œ±œÇ Members
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS members (
        member_id INT(11) NOT NULL AUTO_INCREMENT,
        username VARCHAR(255) NOT NULL UNIQUE,
        password VARCHAR(255) NOT NULL,
        PRIMARY KEY (member_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
    """)

    # Œ†ŒØŒΩŒ±Œ∫Œ±œÇ Destinations
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS destinations (
    trip_id INT AUTO_INCREMENT PRIMARY KEY,
    destination_name VARCHAR(255) NOT NULL,
    category ENUM('air', 'road', 'cruise') NOT NULL,
    description TEXT,

    price DECIMAL(10,2) NOT NULL CHECK(price >= 0),
    available_seats INT NOT NULL CHECK(available_seats >= 0),
    start_date DATE NOT NULL,
    end_date DATE NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    """)

    # Œ†ŒØŒΩŒ±Œ∫Œ±œÇ Booking
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS bookings (
    booking_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    trip_id INT NOT NULL,
    status ENUM('confirmed', 'pending', 'cancelled') NOT NULL DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (trip_id) REFERENCES destinations(trip_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    """)

    # Œ†ŒØŒΩŒ±Œ∫Œ±œÇ payments
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    booking_id INT NOT NULL,
    amount DECIMAL(10,2) NOT NULL CHECK(amount >= 0),
    payment_status ENUM('paid', 'pending', 'failed') NOT NULL DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (booking_id) REFERENCES bookings(booking_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    """)

    # Œ†ŒØŒΩŒ±Œ∫Œ±œÇ wishlist
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS wishlist (
    wishlist_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    trip_id INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (trip_id) REFERENCES destinations(trip_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    """)

    # Œ†ŒØŒΩŒ±Œ∫Œ±œÇ trip_reviews
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS trip_reviews (
    review_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    trip_id INT NOT NULL,
    rating ENUM('1', '2', '3', '4', '5') NOT NULL,
    comment TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (trip_id) REFERENCES destinations(trip_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    """)

    # Œ†ŒØŒΩŒ±Œ∫Œ±œÇ travel_plans
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS travel_plans (
    plan_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    destination VARCHAR(255) NOT NULL,
    start_date DATE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    """)

    # Œ†ŒØŒΩŒ±Œ∫Œ±œÇ group_trips
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS group_trips (
    group_id INT AUTO_INCREMENT PRIMARY KEY,
    organizer_id INT NOT NULL,
    destination VARCHAR(255) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    cost_per_person DECIMAL(10,2) NOT NULL CHECK(cost_per_person >= 0),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (organizer_id) REFERENCES users(user_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    """)


    # Œ†ŒØŒΩŒ±Œ∫Œ±œÇ group_trip_memebrs
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS group_trip_members (
    group_member_id INT AUTO_INCREMENT PRIMARY KEY,
    group_id INT NOT NULL,
    user_id INT NOT NULL,
    status ENUM('invited', 'confirmed', 'declined') NOT NULL DEFAULT 'invited',
    FOREIGN KEY (group_id) REFERENCES group_trips(group_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    """)


# Œ†ŒØŒΩŒ±Œ∫Œ±œÇ user_preferences
cursor.execute("""
CREATE TABLE user_preferences (
preference_id INT AUTO_INCREMENT PRIMARY KEY,
user_id INT NOT NULL,
preferred_destinations TEXT,
dietary_preferences TEXT,
accommodation_type ENUM('hotel', 'hostel', 'apartment', 'resort') DEFAULT 'hotel',
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
""")


#Œ†ŒØŒΩŒ±Œ∫Œ±œÇ travel_posts
cursor.execute("""
CREATE TABLE travel_posts (
post_id INT AUTO_INCREMENT PRIMARY KEY,
user_id INT NOT NULL,
trip_id INT NOT NULL,
content TEXT NOT NULL,
image_url VARCHAR(255),
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
FOREIGN KEY (trip_id) REFERENCES destinations(trip_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
""")

#Œ†ŒØŒΩŒ±Œ∫Œ±œÇ post_interactions
cursor.execute("""
CREATE TABLE post_interactions (
interaction_id INT AUTO_INCREMENT PRIMARY KEY,
post_id INT NOT NULL,
user_id INT NOT NULL,
type ENUM('like', 'comment') NOT NULL,
comment_text TEXT,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (post_id) REFERENCES travel_posts(post_id) ON DELETE CASCADE,
FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
""")

#Œ†ŒØŒΩŒ±Œ∫Œ±œÇ content_reports
cursor.execute("""
CREATE TABLE content_reports (
report_id INT AUTO_INCREMENT PRIMARY KEY,
post_id INT NOT NULL,
reported_by INT NOT NULL,
reason TEXT NOT NULL,
status ENUM('pending', 'reviewed', 'resolved') DEFAULT 'pending',
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (post_id) REFERENCES travel_posts(post_id) ON DELETE CASCADE,
FOREIGN KEY (reported_by) REFERENCES users(user_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
""")


#Œ†ŒØŒΩŒ±Œ∫Œ±œÇ admin_content
cursor.execute("""
CREATE TABLE admin_content (
content_id INT AUTO_INCREMENT PRIMARY KEY,
admin_id INT NOT NULL,
type ENUM('destination', 'activity', 'offer', 'guide') NOT NULL,
title VARCHAR(255) NOT NULL,
description TEXT NOT NULL,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (admin_id) REFERENCES administrators(admin_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
""")

#Œ†ŒØŒΩŒ±Œ∫Œ±œÇ travel_offers
cursor.execute("""
CREATE TABLE travel_offers (
offer_id INT AUTO_INCREMENT PRIMARY KEY,
admin_id INT NOT NULL,
trip_id INT NOT NULL,
discount_percentage DECIMAL(5,2) CHECK(discount_percentage BETWEEN 0 AND 100),
start_date DATE NOT NULL,
end_date DATE NOT NULL,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (admin_id) REFERENCES administrators(admin_id) ON DELETE CASCADE,
FOREIGN KEY (trip_id) REFERENCES destinations(trip_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
""")

#Œ†ŒØŒΩŒ±Œ∫Œ±œÇ calendar_sync
cursor.execute("""
CREATE TABLE calendar_sync (
sync_id INT AUTO_INCREMENT PRIMARY KEY,
booking_id INT NOT NULL,
user_id INT NOT NULL,
calendar_service ENUM('google_calendar', 'iCal') NOT NULL,  -- Œ•œÄŒ∑œÅŒµœÉŒØŒ± Œ∑ŒºŒµœÅŒøŒªŒøŒ≥ŒØŒøœÖ
event_id VARCHAR(255) NOT NULL,  -- Œ§Œø ŒºŒøŒΩŒ±Œ¥ŒπŒ∫œå ID œÑŒøœÖ event œÉœÑŒø Œ∑ŒºŒµœÅŒøŒªœåŒ≥ŒπŒø
sync_status ENUM('synchronized', 'pending', 'failed') NOT NULL DEFAULT 'pending',  
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (booking_id) REFERENCES bookings(booking_id) ON DELETE CASCADE,
FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
""")

    conn.commit()
    conn.close()
    print("Database created successfully!")

# ŒïŒ∫œÑŒ≠ŒªŒµœÉŒ∑ œÑŒøœÖ script
if __name__ == "__main__":
    create_database()

#pip install mysql-connector-python



import mysql.connector
import bcrypt

# Œ£œçŒΩŒ¥ŒµœÉŒ∑ œÉœÑŒ∑ Œ≤Œ¨œÉŒ∑ Œ¥ŒµŒ¥ŒøŒºŒ≠ŒΩœâŒΩ
def connect_db():
    return mysql.connector.connect(
        host="localhost",
        user="root", 
        password="your_password",
        database="iExPLORE"
    )

# üîπ ŒïŒ≥Œ≥œÅŒ±œÜŒÆ œáœÅŒÆœÉœÑŒ∑
def register(username, password, email):
    conn = connect_db()
    cursor = conn.cursor()

    # Hash œÑŒøœÖ Œ∫œâŒ¥ŒπŒ∫Œøœç
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

    try:
        cursor.execute("INSERT INTO users (username, password, email) VALUES (%s, %s, %s)", 
                       (username, hashed_password, email))
        conn.commit()
        print(" ŒïŒ≥Œ≥œÅŒ±œÜŒÆ ŒµœÄŒπœÑœÖœáŒÆœÇ!")
    except mysql.connector.Error as err:
        print(f" Œ£œÜŒ¨ŒªŒºŒ±: {err}")
    finally:
        cursor.close()
        conn.close()

# üîπ Œ£œçŒΩŒ¥ŒµœÉŒ∑ œáœÅŒÆœÉœÑŒ∑
def login(username, password):
    conn = connect_db()
    cursor = conn.cursor(dictionary=True)

    cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
    user = cursor.fetchone()

    if user and bcrypt.checkpw(password.encode('utf-8'), user["password"].encode('utf-8')):
        print(" Œ£œçŒΩŒ¥ŒµœÉŒ∑ ŒµœÄŒπœÑœÖœáŒÆœÇ!")
        return True
    else:
        print(" ŒõŒ¨Œ∏ŒøœÇ œÉœÑŒøŒπœáŒµŒØŒ± œÉœçŒΩŒ¥ŒµœÉŒ∑œÇ.")
        return False

    cursor.close()
    conn.close()

# ŒîŒøŒ∫ŒπŒºŒ≠œÇ
if __name__ == "__main__":
    # ŒîŒøŒ∫ŒπŒºŒÆ ŒµŒ≥Œ≥œÅŒ±œÜŒÆœÇ
    register("testuser", "testpassword", "testuser@example.com")

    # ŒîŒøŒ∫ŒπŒºŒÆ œÉœçŒΩŒ¥ŒµœÉŒ∑œÇ
    login("testuser", "testpassword")


#pip install bcrypt mysql-connector-python

#ŒëŒΩ œåŒªŒ± Œ¥ŒøœÖŒªŒµœçŒøœÖŒΩ œÉœâœÉœÑŒ¨, Œ∏Œ± ŒµŒºœÜŒ±ŒΩŒπœÉœÑŒøœçŒΩ ŒºŒ∑ŒΩœçŒºŒ±œÑŒ± œåœÄœâœÇ:
ŒïŒ≥Œ≥œÅŒ±œÜŒÆ ŒµœÄŒπœÑœÖœáŒÆœÇ!
Œ£œçŒΩŒ¥ŒµœÉŒ∑ ŒµœÄŒπœÑœÖœáŒÆœÇ!



import tkinter as tk
from tkinter import messagebox
import mysql.connector
import bcrypt

#  Œ£œçŒΩŒ¥ŒµœÉŒ∑ œÉœÑŒ∑ Œ≤Œ¨œÉŒ∑
def connect_db():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="your_password",
        database="iExPLORE"
    )

#  ŒàŒªŒµŒ≥œáŒøœÇ œÉœçŒΩŒ¥ŒµœÉŒ∑œÇ œáœÅŒÆœÉœÑŒ∑
def login():
    username = username_entry.get()
    password = password_entry.get()

    conn = connect_db()
    cursor = conn.cursor(dictionary=True)
    
    cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
    user = cursor.fetchone()

    if user and bcrypt.checkpw(password.encode('utf-8'), user["password"].encode('utf-8')):
        messagebox.showinfo(" ŒïœÄŒπœÑœÖœáŒØŒ±", "Œ£œçŒΩŒ¥ŒµœÉŒ∑ ŒµœÄŒπœÑœÖœáŒÆœÇ!")
        show_dashboard(user)
    else:
        messagebox.showerror(" Œ£œÜŒ¨ŒªŒºŒ±", "ŒõŒ¨Œ∏ŒøœÇ œÉœÑŒøŒπœáŒµŒØŒ± œÉœçŒΩŒ¥ŒµœÉŒ∑œÇ.")

    cursor.close()
    conn.close()

#  ŒïŒºœÜŒ¨ŒΩŒπœÉŒ∑ Dashboard
def show_dashboard(user):
    dashboard = tk.Toplevel(root)
    dashboard.title("Dashboard")
    dashboard.geometry("300x200")

    tk.Label(dashboard, text=f" ŒßœÅŒÆœÉœÑŒ∑œÇ: {user['username']}", font=("Arial", 14)).pack(pady=5)
    tk.Label(dashboard, text=f" Email: {user['email']}", font=("Arial", 12)).pack(pady=5)
    tk.Label(dashboard, text=f" ŒïŒ≥Œ≥œÅŒ±œÜŒÆ: {user['created_at']}", font=("Arial", 12)).pack(pady=5)

#  ŒîŒ∑ŒºŒπŒøœÖœÅŒ≥ŒØŒ± GUI ŒºŒµ Tkinter
root = tk.Tk()
root.title("Œ£œçŒΩŒ¥ŒµœÉŒ∑")
root.geometry("300x200")

tk.Label(root, text="ŒåŒΩŒøŒºŒ± œáœÅŒÆœÉœÑŒ∑:").pack()
username_entry = tk.Entry(root)
username_entry.pack()

tk.Label(root, text="ŒöœâŒ¥ŒπŒ∫œåœÇ:").pack()
password_entry = tk.Entry(root, show="*")
password_entry.pack()

tk.Button(root, text="Œ£œçŒΩŒ¥ŒµœÉŒ∑", command=login).pack(pady=10)

root.mainloop()




ADMIN PANEL admin_panel.py (ŒëŒΩ Œø œáœÅŒÆœÉœÑŒ∑œÇ ŒµœáŒµŒπ œÉœÖŒΩŒ¥ŒµŒ∏ŒµŒØ œâœÇ admin)
import tkinter as tk
from tkinter import messagebox, ttk
import mysql.connector

# Œ£œçŒΩŒ¥ŒµœÉŒ∑ œÉœÑŒ∑ ŒíŒî
def connect_db():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="your_password",
        database="iExPLORE"
    )

# ŒïŒºœÜŒ¨ŒΩŒπœÉŒ∑ œåŒªœâŒΩ œÑœâŒΩ œáœÅŒ∑œÉœÑœéŒΩ
def show_users():
    conn = connect_db()
    cursor = conn.cursor()
    
    cursor.execute("SELECT user_id, username, email FROM users")
    users = cursor.fetchall()
    
    user_list.delete(*user_list.get_children())  # ŒöŒ±Œ∏Œ±œÅŒπœÉŒºœåœÇ ŒªŒØœÉœÑŒ±œÇ
    for user in users:
        user_list.insert("", "end", values=user)
    
    cursor.close()
    conn.close()

# ŒîŒπŒ±Œ≥œÅŒ±œÜŒÆ œáœÅŒÆœÉœÑŒ∑
def delete_user():
    selected_item = user_list.selection()
    if not selected_item:
        messagebox.showerror("Œ£œÜŒ¨ŒªŒºŒ±", "ŒïœÄŒ≠ŒªŒµŒæŒµ Œ≠ŒΩŒ±ŒΩ œáœÅŒÆœÉœÑŒ∑!")
        return
    
    user_id = user_list.item(selected_item, "values")[0]
    
    conn = connect_db()
    cursor = conn.cursor()
    
    cursor.execute("DELETE FROM users WHERE user_id = %s", (user_id,))
    conn.commit()
    
    cursor.close()
    conn.close()
    
    messagebox.showinfo("ŒïœÄŒπœÑœÖœáŒØŒ±", "Œü œáœÅŒÆœÉœÑŒ∑œÇ Œ¥ŒπŒ±Œ≥œÅŒ¨œÜŒ∑Œ∫Œµ!")
    show_users()

# Œ†œÅŒøŒ±Œ≥œâŒ≥ŒÆ œÉŒµ Admin
def promote_user():
    selected_item = user_list.selection()
    if not selected_item:
        messagebox.showerror("Œ£œÜŒ¨ŒªŒºŒ±", "ŒïœÄŒ≠ŒªŒµŒæŒµ Œ≠ŒΩŒ±ŒΩ œáœÅŒÆœÉœÑŒ∑!")
        return
    
    user_id = user_list.item(selected_item, "values")[0]
    
    conn = connect_db()
    cursor = conn.cursor()
    
    cursor.execute("INSERT INTO administrators (user_id, role) VALUES (%s, 'manager')", (user_id,))
    conn.commit()
    
    cursor.close()
    conn.close()
    
    messagebox.showinfo("ŒïœÄŒπœÑœÖœáŒØŒ±", "Œü œáœÅŒÆœÉœÑŒ∑œÇ Œ≠Œ≥ŒπŒΩŒµ Admin!")
    show_users()

# ŒïŒºœÜŒ¨ŒΩŒπœÉŒ∑ œåŒªœâŒΩ œÑœâŒΩ œÑŒ±ŒæŒπŒ¥ŒπœéŒΩ
def show_trips():
    conn = connect_db()
    cursor = conn.cursor()
    
    cursor.execute("SELECT trip_id, destination_name, price FROM destinations")
    trips = cursor.fetchall()
    
    trip_list.delete(*trip_list.get_children())  
    for trip in trips:
        trip_list.insert("", "end", values=trip)
    
    cursor.close()
    conn.close()

# ŒîŒπŒ±Œ≥œÅŒ±œÜŒÆ œÑŒ±ŒæŒπŒ¥ŒπŒøœç
def delete_trip():
    selected_item = trip_list.selection()
    if not selected_item:
        messagebox.showerror("Œ£œÜŒ¨ŒªŒºŒ±", "ŒïœÄŒ≠ŒªŒµŒæŒµ Œ≠ŒΩŒ± œÑŒ±ŒæŒØŒ¥Œπ!")
        return
    
    trip_id = trip_list.item(selected_item, "values")[0]
    
    conn = connect_db()
    cursor = conn.cursor()
    
    cursor.execute("DELETE FROM destinations WHERE trip_id = %s", (trip_id,))
    conn.commit()
    
    cursor.close()
    conn.close()

    messagebox.showinfo("ŒïœÄŒπœÑœÖœáŒØŒ±", "Œ§Œø œÑŒ±ŒæŒØŒ¥Œπ Œ¥ŒπŒ±Œ≥œÅŒ¨œÜŒ∑Œ∫Œµ!")
    show_trips()

# GUI Admin Panel
admin_panel = tk.Tk()
admin_panel.title("Admin Panel")
admin_panel.geometry("600x500")

# Œ†ŒØŒΩŒ±Œ∫Œ±œÇ ŒßœÅŒ∑œÉœÑœéŒΩ
tk.Label(admin_panel, text="ŒîŒπŒ±œáŒµŒØœÅŒπœÉŒ∑ ŒßœÅŒ∑œÉœÑœéŒΩ", font=("Arial", 12, "bold")).pack(pady=5)
user_list = ttk.Treeview(admin_panel, columns=("ID", "Username", "Email"), show="headings")
user_list.heading("ID", text="ID")
user_list.heading("Username", text="Username")
user_list.heading("Email", text="Email")
user_list.pack()

tk.Button(admin_panel, text="ŒëŒΩŒ±ŒΩŒ≠œâœÉŒ∑", command=show_users).pack(side="left", padx=10)
tk.Button(admin_panel, text="ŒîŒπŒ±Œ≥œÅŒ±œÜŒÆ", command=delete_user).pack(side="left", padx=10)
tk.Button(admin_panel, text="Œ†œÅŒøŒ±Œ≥œâŒ≥ŒÆ œÉŒµ Admin", command=promote_user).pack(side="left", padx=10)

# Œ†ŒØŒΩŒ±Œ∫Œ±œÇ Œ§Œ±ŒæŒπŒ¥ŒπœéŒΩ
tk.Label(admin_panel, text="ŒîŒπŒ±œáŒµŒØœÅŒπœÉŒ∑ Œ§Œ±ŒæŒπŒ¥ŒπœéŒΩ", font=("Arial", 12, "bold")).pack(pady=10)
trip_list = ttk.Treeview(admin_panel, columns=("ID", "Destination", "Price"), show="headings")
trip_list.heading("ID", text="ID")
trip_list.heading("Destination", text="Œ†œÅŒøŒøœÅŒπœÉŒºœåœÇ")
trip_list.heading("Price", text="Œ§ŒπŒºŒÆ (‚Ç¨)")
trip_list.pack()

tk.Button(admin_panel, text="ŒëŒΩŒ±ŒΩŒ≠œâœÉŒ∑", command=show_trips).pack(side="left", padx=10)
tk.Button(admin_panel, text="ŒîŒπŒ±Œ≥œÅŒ±œÜŒÆ", command=delete_trip).pack(side="left", padx=10)

# ŒïŒ∫Œ∫ŒØŒΩŒ∑œÉŒ∑ GUI
admin_panel.mainloop()



ŒïŒ≥Œ∫Œ±Œ∏ŒπœÉœÑŒøœçŒºŒµ Œ§kinter :     pip install tk

pip install mysql-connector-python tk

Œ§œÅŒ≠œáŒøœÖŒºŒµ œÑŒø script :  python admin_panel.py


